<?php namespace ChapmanRadio;class FeatureModel extends ImageModel {		public $id;		public $title;	public $text;	public $link;	public $order;	public $active;	public $size;	public $posted;	public $expires;		public $units;		public $status;		private static $DataCache = array();			public static $DataMap = array(		"id" => "feature_id",		"type" => "feature_type",		"title" => "feature_title",		"text" => "feature_text",		"link" => "feature_link",		"priority" => "feature_priority",		"active" => "feature_active",		"size" => "feature_size",		"posted" => "feature_posted",		"expires" => "feature_expires",		"revisionkey" => "revisionkey"		);			public static function FromId($id, $usecache = false){		if($id == 0) return NULL;		if($usecache && isset(FeatureModel::$DataCache[$id])) return FeatureModel::$DataCache[$id];		return FeatureModel::$DataCache[$id] = FeatureModel::FromResult(DB::GetFirst("SELECT * FROM features WHERE feature_id = :id", array(":id" => $id)));		}			public static function GetList(){		if(isset($_REQUEST['_dev_all_features'])){			return FeatureModel::FromResults(DB::GetAll("SELECT * FROM features ORDER BY feature_priority DESC"));			}		return FeatureModel::FromResults(DB::GetAll("SELECT * FROM v_features_active"));		}		public static function FromResult($result){		if($result === NULL || $result === FALSE) return NULL;		return new FeatureModel($result);		}		public static function FromResults($results){		$ret = array();		foreach($results as $result) $ret[] = FeatureModel::FromResult($result);		return $ret;		}		public function __construct($db_assoc){		foreach(FeatureModel::$DataMap as $prop => $db) if(isset($db_assoc[$db])) $this->$prop = $db_assoc[$db];		$this->objtype = "FeatureModel";				$this->imgpath = "features/".sha1($this->id)."/";		$this->FlushImgRefs();				$this->posted_unix = strtotime($this->posted);		$this->expires_unix = strtotime($this->expires);				// Handle 64bit 0s		if($this->posted_unix == -62169955200) $this->posted_unix = FALSE;		if($this->expires_unix == -62169955200) $this->expires_unix = FALSE;						$this->units = 0;		if($this->size == 310) $this->units = 1;		if($this->size == 626) $this->units = 2;		if($this->size == 942) $this->units = 3;				$this->ImageAspectRatio = $this->size / 310;				$this->status = "disabled";		if($this->active) $this->status = "active";		if($this->expires_unix !== FALSE && $this->expires_unix < time()) $this->status = "expired";		if($this->posted_unix !== FALSE && $this->posted_unix > time()) $this->status = "pending";		}			public function HandleImage($upload){		Imaging::CopyResizeBestCrop($upload, $this->ImgPath(310), 310, 310);		Imaging::CopyResizeBestCrop($upload, $this->ImgPath(626), 626, 310);		Imaging::CopyResizeBestCrop($upload, $this->ImgPath(942), 942, 310);		$this->MarkRevised();		}			public function MarkRevised(){		$this->revsionkey = Util::RandomKey(10);		$this->FlushImgRefs();		DB::Query("UPDATE features SET revisionkey = :key WHERE feature_id = :id", array(":key" => $this->revsionkey, ":id" => $this->id));		}			public function ImgDef(){		$this->img = $this->Img($this->size);		}		}