<?php namespace ChapmanRadio;class UserModel extends ImageModel {		public $id;	public $rawdata;		public $fbid;	public $email;	public $studentid;	public $phone;	public $fname;	public $lname;		public $name;	public $bestname;		public $djname;	public $gender;	public $classclub;	public $lastlogin;	public $password;	public $verifycode;	public $type;		public $petpreference;		public $staffgroup;	public $staffposition;	public $staffemail;		public $confirmnewsletter;	public $quizpassedseasons;	public $workshoprequired;		public $isSuspended;		public $quiz_seasons;	public $seasons;	public $seasoncount;		public static $DataMap = array(		"id" => "userid",		"fbid" => "fbid",		"email" => "email",		"studentid" => "studentid",		"phone" => "phone",		"fname" => "fname",		"lname" => "lname",		"djname" => "djname",		"gender" => "gender",		"seasons_csv" => "seasons",		"quiz_seasons_csv" => "quizpassedseasons",		"classclub" => "classclub",		"lastlogin" => "lastlogin",		"lastip" => "lastip",		"password" => "password",		"verifycode" => "verifycode",		"type" => "type",		"petpreference" => "petpreference",		"staffgroup" => "staffgroup",		"staffposition" => "staffposition",		"staffemail" => "staffemail",		"confirmnewsletter" => "confirmnewsletter",		"workshoprequired" => "workshoprequired",		"revisionkey" => "revisionkey",		"suspended" => "suspended"		);		public static function AllInSeason($season = null, $extra = ""){		if($season == null) $season = Site::CurrentSeason();		return self::FromResults(DB::GetAll("SELECT * FROM users WHERE seasons LIKE :s $extra", [ ":s" => "%{$season}%" ]));		}			public static function FromId($id, $usecache = false){		if($id == 0) return NULL;		return Cache::Handle("user$id", function() use ($id){			return UserModel::FromResult(DB::GetFirst("SELECT * FROM users WHERE userid = :userid", array(":userid" => $id)));			}, $usecache);		}			public static function FromIds($ids){		if(empty($ids)) return array();		$conditions = array();		foreach($ids as $id) $conditions[] = "userid = $id";		return UserModel::FromResults(DB::GetAll("SELECT * FROM users WHERE ".implode(" OR ", $conditions).""));		}		public static function FromVerifyCode($code){		return UserModel::FromResult(DB::GetFirst("SELECT * FROM users WHERE verifycode = :code", array(":code" => $code)));		}		public static function FromResult($result){		if($result === NULL || $result === FALSE) return NULL;		return new UserModel($result);		}		public static function FromResults($results){		$ret = array();		foreach($results as $result) $ret[] = UserModel::FromResult($result);		return $ret;		}		public static function Search($input, $season = NULL, $additional = ""){		$results = array();		$ids = (is_numeric($input)) ? "OR userid=:input OR studentid=:input" : "";		$seasonquery = ($season && $season != '*') ? " AND seasons LIKE '%$season%'" : "";		$data = DB::GetAll("SELECT * FROM users WHERE (name LIKE :search OR fname LIKE :search OR lname LIKE :search OR djname LIKE :search OR email LIKE :search $ids) $seasonquery $additional", array(			":search" => "%".$input."%",			":input" => $input			));		foreach($data as $show) $results[] = new UserModel($show);		return $results;		}		public function __construct($db_assoc){			if($db_assoc === NULL || $db_assoc === FALSE) throw new Exception("Cannot create a UserModel from empty data");				$this->objtype = "UserModel";		$this->rawdata = $db_assoc;				foreach(UserModel::$DataMap as $prop => $db) if(isset($db_assoc[$db])) $this->$prop = $db_assoc[$db];				$this->name = $this->fname . " " . $this->lname;				$this->bestname = ($this->djname != "" && $this->djname != $this->name) ? $this->name."<br /><span class='genre'>".$this->djname."</span>" : $this->name;				$this->isSuspended = ($db_assoc['suspended'] == '1');				$this->seasons = array_filter(explode(',', $db_assoc['seasons']));		$this->seasoncount = count($this->seasons);		$this->quiz_seasons = explode(',', $db_assoc['quizpassedseasons']);				$this->imgpath = "users/".sha1("cr_user_".$this->id)."/";		$this->FlushImgRefs();				Cache::Set("user{$this->id}", $this);		}		public function IsActivated(){		return $this->HasSeason(Site::CurrentSeason());		}		public function GetShows($additional = ""){		return DB::GetAll("SELECT * FROM shows WHERE (userid1=:id OR userid2=:id OR userid3=:id OR userid4=:id OR userid5=:id) $additional", array(":id" => $this->id));		}			public function DjNameOrName(){		return $this->djname ? $this->djname : $this->name;		}			public function GetShowModels(){		return ShowModel::FromResults($this->GetShows());		}			public function GetShowsInSeason($season = 0, $additional = ""){		if(!$season) $season = Site::CurrentSeason();		return ShowModel::FromResults(DB::GetAll("SELECT * FROM shows WHERE (userid1=:id OR userid2=:id OR userid3=:id OR userid4=:id OR userid5=:id) AND seasons LIKE :likeseason $additional", array(":id" => $this->id, ":likeseason" => '%'.$season.'%')));		}		public function GetStrikes($season = 0){		if(!$season) $season = Season::current();		$id = $this->id;		return Cache::Handle("user{$this->id}strikes{$season}", function() use($id, $season){			return DB::GetAll("SELECT * FROM strikes WHERE userid = :id AND season= :season", array(":id" => $id, ":season" => $season));			});		}		public function Login(){		Session::LoginModel($this);		}		public function IsStaff() {		return ($this->type == 'staff') ? true : false;		}		public function DeniedLogin($reason){			$now = time();		$season = Season::current();		DB::Insert("suspendedloginattempts", [			'userid' => $this->id,			'timestamp' => $now,			'type' => $reason,			'season' => $season			]);		}		public function MarkRevised(){		$this->revsionkey = Util::RandomKey(10);		$this->FlushImgRefs();		DB::Query("UPDATE users SET revisionkey = :key WHERE userid = :userid", array(":key" => $this->revsionkey, ":userid" => $this->id));		}			public function Update($field, $value){				if($field == 'phone') $value = preg_replace("/\\D/", "", $value);			if(isset(UserModel::$DataMap[$field])){			$dbfield = UserModel::$DataMap[$field];			DB::Query("UPDATE users SET $dbfield = :value WHERE userid = :userid", array(":value" => $value, ":userid" => $this->id));			$this->$field = $value;			}		else {			throw new Exception("Unable to update unmapped property $field");			}		}			public function AddSeason($season){		if($this->HasSeason($season)) return;		DB::Query("UPDATE users SET seasons=CONCAT(seasons,',',:season) WHERE userid = :userid", array(":season" => $season, ":userid" => $this->id));		$this->seasons[] = $season;		}			public function HasSeason($season){		return in_array($season, $this->seasons);		}			public function AddQuizSeason($season){		if($this->HasQuizSeason($season)) return;		DB::Query("UPDATE users SET quizpassedseasons=CONCAT(quizpassedseasons,',',:season) WHERE userid = :userid", array(":season" => $season, ":userid" => $this->id));		$this->quiz_seasons[] = $season;		}			public function HasQuizSeason($season){		return in_array($season, $this->quiz_seasons);		}		}